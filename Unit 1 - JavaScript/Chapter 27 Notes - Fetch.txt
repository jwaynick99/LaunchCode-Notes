Fetching Data;
fetch Function - a global function that will requests or fetches data from an API.

example:
fetch("https://handlers.education.launchcode.org/static/weather.json").then(function(response) {
    console.log(response);
} );

aspects of the fetch function:
the argument for the function contains the URL of where we are requesting data:
-fetch("https://handlers.education.launchcode.org/static/weather.json")

and a method (then) which handles the response:
 -.then(function(response) {
        console.log(response);
    } );

breaking down fetch;
a URL is passed to fetch as a parameter,
this causes an HTTP GET request to be sent from the browser to the API,
the API processes the request, and sends back a response, which contains our JSON formatted data,
when the browser receives the response, the .then method executes.
the response handler called by our .then method runs, then deals with the data sent from the API,
this function updates the HTML page using DOM methods.

fetch can also be used to send POST and PUT requests.

the response received from our GET request contains a Response object, which is an instance of the Response class.
the Response class contains methods that allow us to access the status of an API request and the data returned in the response.

example:
<html>
    <head>
    <title>Launch Status</title>
    <script>
        window.addEventListener("load", function() {
            fetch("https://handlers.education.launchcode.org/static/weather.json").then( function(response) {
                // Access the JSON in the response
                response.json().then( function(json) { //.json here pulls the JSON object from our response, and then passes it into our anonymous function to be used in te function body to log its contents.
                console.log(json); //json here is the received JSON object from our request.
                });
            });
        });
    </script>
    </head>
    <body>
    <h1>Launch Status</h1>
    <h3>Weather Conditions</h3>
    <div id="weather-conditions">
        <!-- TODO: dynamically add html about weather using data from API -->
    </div>
    </body>
</html>

using the DOM to handle our JSON repsonse, we can dynamically update the HTML to alter our page.

example:
<html>
    <head>
    <title>Launch Status</title>
    <script>
        window.addEventListener("load", function() {
            fetch("https://handlers.education.launchcode.org/static/weather.json").then( function(response) {
                response.json().then( function(json) {
                const div = document.getElementById("weather-conditions");
                // Add HTML that includes the JSON data
                div.innerHTML = `
                    <ul>
                        <li>Temp ${json.temp}</li>
                        <li>Wind Speed ${json.windSpeed}</li>
                        <li>Status ${json.status}</li>
                        <li>Chance of Precip ${json.chanceOfPrecipitation}</li>
                    </ul>
                `;
                });
            });
        });
    </script>
    </head>
    <body>
    <h1>Launch Status</h1>
    <h3>Weather Conditions</h3>
    <div id="weather-conditions">
        <!-- Weather data is added here dynamically. -->
    </div>
    </body>
</html>

breakdown of the above example:
on line 6 the fetch command sends a request to the API URL,
the API returns a response, and the .then method calls our handler function and response is passed as a parameter,
on line 7 the handler function receives the JSON data, and if it succeeds the function(json) gets called,
line 8 we define our DIV element using the DOM with id weather-conditions,
on line 10 we define the innerHTML of our div and pass the unordered list, using ${} template literal syntax to pass the values of our JSON object.
when the functions completes our HTML document updates and our page dynamically changes to display our requested matterial.

fetch was chosen as the tool to request data because itâ€™s supported in modern browsers by default and is simple to use. When viewing resources other than this book,
you will see various other ways to request data in a web page with JavaScript. Other ways include, but are not limited to, jQuery.get, jQuery.ajax, and XMLHttpRequest.

ASYNCHRONOUS and PROMISES;
asynchronous - not simultaneous or concurrent in time
synchronous - simultaneous or concurrent in time

when fetching in JS, the requests are asynchronous, this means we dont know ecaxtly when a response will be received in the browser.
this times is variable based on network speed, location and repsonse size.

Response Handlers;
the .then method is what handles this delay

example:
const fetchPromise = fetch("https://handlers.education.launchcode.org/static/weather.json");
fetchPromise.then( function(response) {
    console.log(response);
} );

fethc returns an instance of the Promise class. which represents a promise to the doc.
a promise is the eventual outsome of an asynchronous event. 
in the above example, fethc response represents the eventual repsonse from the URL.

when a promise is fulfilled the .then method runs alogn with its code, 
when a promise is rejected, an error response will be given. 

