Libraries;
A library iin programming is a collection ofgf reusable code, such as methods and classes, that developers can us to write more complex applications more efficiently.

In web apps code can exist in the browser (front-end) and in the host server (back-end).

frameworks and libraries are NOT libraries, although they are similar. 

Frameworks control the flow of the application, and provide structure for it. Frameworks focus on plugging int he code at the appropriate time.
ie, Angular.

React is a front-end library maintained by Meta/Facebook. FOSS.
React is built on COMPONENTS.

Components are blocks of reusable code that we write.
Components are responsible for inidividual elements of our webpage. 

example on instacart, you may see elements for:
    A button for logging into your account.
    A button for signing up for a new account.
    A section full of local to you stores so that you can select one you would like delivery from.
    Each store and vital information about them such as when items can be delivered by and a short byline about what the store sells.
    Common questions have their own section that expands when the user clicks on it to reveal the answer.

Components may be functional or classes.

Best practice is each component lives in its own file, and those files live in a folder inside src called "components"

Components are then called in an App component where we want them on our page.

Functional Components;
Functions that return HTML

example: 
function SchnucksInfo() {
   return(
      <div>
         <h1>Schnucks</h1>
         <p>Grocery store</p>
         <p>Delivering within an hour</p>
      </div>
   );
}

to call our functional component "SchnucksInfo" in a seperate file within the components directory, we export it and then import it into App.jsx

ie:
function App() {
  return (
    <div className="App">
      <SchnucksInfo />
    </div>
  );
}

when we run the application, the SchnucksInfo will be rendered in HTML.

we can pass "props" short for properties into our functional components. 

function FavoriteFoodItem(props) {
   return(
      <div>
         <h2>Your favorite food item is {props.foodItem}!</h2>
      </div>
   );
}

and then we can access our props key by passing an argument into the call:
function App() {
  return (
    <div className="App">
      <FavoriteFoodItem foodItem = "butter" /> //this is passing in an HTML attribute to foodItem and setting the value to "butter" which will then be passed to our return of FavoriteFoodItem()
    </div>
  );
}

After running our application the <h2> will now look like "Your favorite food item is butter!"

Class components;
classes that contain a render() method that returns the HTMl we need. It should also extend React.Component

this means when writing a react component we have to "import React from "react""

example:
class DierbergsInfo extends React.Component {
   render() {
      return(
         <div>
            <h1>Dierbergs</h1>
            <p>Grocery store</p>
            <p>Delivering within an hour</p>
         </div>
      );
   }
}

this class component can be called just like SchnucksInfo:
function App() {
  return (
    <div className="App">
      <DierbergsInfo />
    </div>
  );
}

CREATING A REACT APPLICATION;
Within the project directory we need to install vite:
"npm create vite@latest"

this will prompt for a name for the project,
then we will select "react" from the prompt,
then we will select "JavaScript"
then we can CD into root directory of project,
when in root directory, in our terminal we will want to "npm i" and then "npm run dev"
npm run dev will launch our local development server.

in our dev server we can type h for helpful shortcuts.
entering "o" inside the terminal will open our project in the browser. (we can also navigate to the local URL, "http://localhost:5173")


USING VITE/REACT;
With vite, the index.html is the entry point for the entire application. 

<script type="module" src="/src/main.jsx"></script>
this line of code will reference any JavaScript code within our application.

the /src directory:
main.jsx file renders App.jsx component, //main.jsx and index.jsx are used interchangeably.
App.jsx component is used to call ALL React components and handle our applications using "routing",
App.css file is styling specifically related to React applications. //typically used for styling individual components,
index.css is a file for styling our application globally. // for styling all components in the application, more broad than what should be in App.css

When starting a server form the command line, Vite will automatically resolve config file "vite.config.js"
the main purpose for this file is to define or customize how to application is built or served. We can define environment variables here for sensitive or specific information we NEED for the application to build. 

default vite.config.js:
import { defineConfig } from 'vite' //we first import defineConfig function from the vite package
import react from '@vitejs/plugin-react' //imports the react plugin to allow React support in-browser

// https://vitejs.dev/config/
export default defineConfig({ //then exports the default config object that was imported on line 1,
  plugins: [react()], // with the react plugin that enables React code to run.
})

this can be changed to accomodate development needs. 

CREATING A COMPONENT;
example:
export default function Hello() {
   return(
      <div>
         <p>Hello World!</p>
      </div>
   );
}

components can only return ONE parent HTML element, if we attempted to add the <p> tag outside of our parent <div> we would get an error and the app would not run. 
be sure to only have one PARENT element in our component.


